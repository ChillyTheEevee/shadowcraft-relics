package world.sc2.shadowcraftrelics.relics.morphable_relic;

import org.bukkit.Bukkit;
import org.bukkit.entity.Player;
import org.bukkit.inventory.EquipmentSlot;
import org.bukkit.inventory.ItemStack;
import world.sc2.config.Config;
import world.sc2.config.ConfigManager;
import world.sc2.nbt.NBTTag;
import world.sc2.shadowcraftrelics.events.RelicMorphEvent;
import world.sc2.shadowcraftrelics.relics.NBTStorageRelic;
import world.sc2.shadowcraftrelics.relics.Relic;
import world.sc2.utility.ChatUtils;
import world.sc2.utility.ItemUtils;

import java.util.List;

/**
 * An implementation of the {@link MorphableRelic} interface. This implementation uses several {@link Config}s to store
 * information about the various states of a MorphableRelic. Every {@link ItemStack} state of a ConfigMorphableRelic
 * contains two {@link NBTTag}s: the morphConfigID tag and the morphIndex tag.
 * <p>
 * The morphConfigID tag points to a Config in the plugin's data directory that contains a list of states for that
 * ConfigMorphableRelic
 * <p>
 * The morphIndex tag contains an index [0, list.size()-1] that denotes which index in the state list the current state
 * is
 */
public abstract class ConfigMorphableRelic extends Relic implements MorphableRelic, NBTStorageRelic {

    private static final String MORPHABLE_RELIC_DATA_DIRECTORY = "data/morphableRelics/";
    private static final String RELIC_STATE_LIST_CONFIG_KEY = "relicStates";
    private static final String WARNING_MISSING_MORPH_INDEX_KEY = "messages.warning_missing_index";
    private static final String WARNING_STORED_RELIC_STATES_NULL = "messages.warning_stored_relic_states_null";

    private final ConfigManager configManager;
    private final NBTTag<String, String> morphConfigIDTag;
    private final NBTTag<Integer, Integer> morphIndexTag;

    /**
     * @param name             The name of the Relic
     * @param config           The {@link Config} assigned to the Relic
     * @param configManager    The instance of {@link ConfigManager} generated by the plugin
     * @param morphConfigIDTag The NBT tag in which the ConfigMorphableRelic's morph config identifier is stored
     * @param morphIndexTag    The NBT tag in which the ConfigMorphableRelic's index is stored
     */
    public ConfigMorphableRelic(String name, Config config, ConfigManager configManager,
                                NBTTag<String, String> morphConfigIDTag, NBTTag<Integer, Integer> morphIndexTag) {
        super(name, config);

        this.configManager = configManager;

        this.morphConfigIDTag = morphConfigIDTag;
        this.morphIndexTag = morphIndexTag;
    }

    public void morph(RelicMorphEvent event) {
        Player player = event.getPlayer();
        ItemStack currentRelicState = event.getCurrentRelicState();
        EquipmentSlot equipmentSlot = event.getEquipmentSlot();

        // 1) Store saved data on the current Relic into the list
            // a) Get the index of the current object in the list
        Integer currentIndex = morphIndexTag.getStoredData(currentRelicState);

        if (currentIndex == null) {
            Bukkit.getLogger().severe(ChatUtils.chat(config.get().getString(WARNING_MISSING_MORPH_INDEX_KEY)));
            return;
        }
            // b) update the list at the config value with the serialized version of this ItemStack
        Config storedConfig = configManager.getConfig(MORPHABLE_RELIC_DATA_DIRECTORY +
                morphConfigIDTag.getStoredData(currentRelicState));

        List<byte[]> relicStates;
        try {
            relicStates = (List<byte[]>) storedConfig.get().getList(RELIC_STATE_LIST_CONFIG_KEY);
        } catch (ClassCastException e) {
            e.printStackTrace();
            return;
        }

        if (relicStates == null) {
            Bukkit.getLogger().severe(ChatUtils.chat(ChatUtils.chat(
                    config.get().getString(WARNING_STORED_RELIC_STATES_NULL))));
            return;
        }

        relicStates.set(currentIndex, ItemUtils.serializeItemStack(currentRelicState));

        storedConfig.get().set(RELIC_STATE_LIST_CONFIG_KEY, relicStates);

        // 2) Get the next relic state in the list
            // a) Get the index of the next object in the list (currentIndex + 1)
        currentIndex++;
        if (currentIndex == relicStates.size()) {
            currentIndex = 0;
        }
            // b) Retrieve and deserialize the ItemStack stored within the list at the next index
        ItemStack nextRelicState = ItemUtils.deserializeItemStack(relicStates.get(currentIndex));

        // 3) Swap the current relic state with the next relic state
            // a) Swap the ItemStack in ItemSlot with the new relic state
        player.getInventory().setItem(equipmentSlot, nextRelicState);


    }

    @Override
    public NBTTag[] getRelicNBTTags() {
        return new NBTTag[]{};
    }

}
